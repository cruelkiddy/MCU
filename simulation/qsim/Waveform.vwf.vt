// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2019 15:13:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MCU2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MCU2_vlg_sample_tst(
	clk,
	exINT,
	portIn,
	rst,
	sampler_tx
);
input  clk;
input  exINT;
input [15:0] portIn;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or exINT or portIn or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MCU2_vlg_check_tst (
	PinOut,
	drive,
	portOut,
	sampler_rx
);
input  PinOut;
input [31:0] drive;
input [15:0] portOut;
input sampler_rx;

reg  PinOut_expected;
reg [31:0] drive_expected;
reg [15:0] portOut_expected;

reg  PinOut_prev;
reg [31:0] drive_prev;
reg [15:0] portOut_prev;

reg  PinOut_expected_prev;
reg [31:0] drive_expected_prev;
reg [15:0] portOut_expected_prev;

reg  last_PinOut_exp;
reg [31:0] last_drive_exp;
reg [15:0] last_portOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	PinOut_prev = PinOut;
	drive_prev = drive;
	portOut_prev = portOut;
end

// update expected /o prevs

always @(trigger)
begin
	PinOut_expected_prev = PinOut_expected;
	drive_expected_prev = drive_expected;
	portOut_expected_prev = portOut_expected;
end



// expected PinOut
initial
begin
	PinOut_expected = 1'bX;
	PinOut_expected = #49999000 1'b0;
end 
// expected drive[ 31 ]
initial
begin
	drive_expected[31] = 1'bX;
	drive_expected[31] = #49999000 1'b0;
end 
// expected drive[ 30 ]
initial
begin
	drive_expected[30] = 1'bX;
	drive_expected[30] = #49999000 1'b0;
end 
// expected drive[ 29 ]
initial
begin
	drive_expected[29] = 1'bX;
	drive_expected[29] = #49999000 1'b0;
end 
// expected drive[ 28 ]
initial
begin
	drive_expected[28] = 1'bX;
	drive_expected[28] = #49999000 1'b0;
end 
// expected drive[ 27 ]
initial
begin
	drive_expected[27] = 1'bX;
	drive_expected[27] = #49999000 1'b0;
end 
// expected drive[ 26 ]
initial
begin
	drive_expected[26] = 1'bX;
	drive_expected[26] = #49999000 1'b0;
end 
// expected drive[ 25 ]
initial
begin
	drive_expected[25] = 1'bX;
	drive_expected[25] = #49999000 1'b0;
end 
// expected drive[ 24 ]
initial
begin
	drive_expected[24] = 1'bX;
	drive_expected[24] = #49999000 1'b0;
end 
// expected drive[ 23 ]
initial
begin
	drive_expected[23] = 1'bX;
	drive_expected[23] = #49999000 1'b0;
end 
// expected drive[ 22 ]
initial
begin
	drive_expected[22] = 1'bX;
	drive_expected[22] = #49999000 1'b0;
end 
// expected drive[ 21 ]
initial
begin
	drive_expected[21] = 1'bX;
	drive_expected[21] = #49999000 1'b0;
end 
// expected drive[ 20 ]
initial
begin
	drive_expected[20] = 1'bX;
	drive_expected[20] = #49999000 1'b0;
end 
// expected drive[ 19 ]
initial
begin
	drive_expected[19] = 1'bX;
	drive_expected[19] = #49999000 1'b0;
end 
// expected drive[ 18 ]
initial
begin
	drive_expected[18] = 1'bX;
	drive_expected[18] = #49999000 1'b0;
end 
// expected drive[ 17 ]
initial
begin
	drive_expected[17] = 1'bX;
	drive_expected[17] = #49999000 1'b0;
end 
// expected drive[ 16 ]
initial
begin
	drive_expected[16] = 1'bX;
	drive_expected[16] = #49999000 1'b0;
end 
// expected drive[ 15 ]
initial
begin
	drive_expected[15] = 1'bX;
	drive_expected[15] = #49999000 1'b0;
end 
// expected drive[ 14 ]
initial
begin
	drive_expected[14] = 1'bX;
	drive_expected[14] = #49999000 1'b0;
end 
// expected drive[ 13 ]
initial
begin
	drive_expected[13] = 1'bX;
	drive_expected[13] = #49999000 1'b0;
end 
// expected drive[ 12 ]
initial
begin
	drive_expected[12] = 1'bX;
	drive_expected[12] = #49999000 1'b0;
end 
// expected drive[ 11 ]
initial
begin
	drive_expected[11] = 1'bX;
	drive_expected[11] = #49999000 1'b0;
end 
// expected drive[ 10 ]
initial
begin
	drive_expected[10] = 1'bX;
	drive_expected[10] = #49999000 1'b0;
end 
// expected drive[ 9 ]
initial
begin
	drive_expected[9] = 1'bX;
	drive_expected[9] = #49999000 1'b0;
end 
// expected drive[ 8 ]
initial
begin
	drive_expected[8] = 1'bX;
	drive_expected[8] = #49999000 1'b0;
end 
// expected drive[ 7 ]
initial
begin
	drive_expected[7] = 1'bX;
	drive_expected[7] = #49999000 1'b0;
end 
// expected drive[ 6 ]
initial
begin
	drive_expected[6] = 1'bX;
	drive_expected[6] = #49999000 1'b0;
end 
// expected drive[ 5 ]
initial
begin
	drive_expected[5] = 1'bX;
	drive_expected[5] = #49999000 1'b0;
end 
// expected drive[ 4 ]
initial
begin
	drive_expected[4] = 1'bX;
	drive_expected[4] = #49999000 1'b0;
end 
// expected drive[ 3 ]
initial
begin
	drive_expected[3] = 1'bX;
	drive_expected[3] = #49999000 1'b0;
end 
// expected drive[ 2 ]
initial
begin
	drive_expected[2] = 1'bX;
	drive_expected[2] = #49999000 1'b0;
end 
// expected drive[ 1 ]
initial
begin
	drive_expected[1] = 1'bX;
	drive_expected[1] = #49999000 1'b0;
end 
// expected drive[ 0 ]
initial
begin
	drive_expected[0] = 1'bX;
	drive_expected[0] = #49999000 1'b0;
end 
// expected portOut[ 15 ]
initial
begin
	portOut_expected[15] = 1'bX;
	portOut_expected[15] = #999000 1'b0;
end 
// expected portOut[ 14 ]
initial
begin
	portOut_expected[14] = 1'bX;
	portOut_expected[14] = #999000 1'b0;
end 
// expected portOut[ 13 ]
initial
begin
	portOut_expected[13] = 1'bX;
	portOut_expected[13] = #999000 1'b0;
end 
// expected portOut[ 12 ]
initial
begin
	portOut_expected[12] = 1'bX;
	portOut_expected[12] = #999000 1'b0;
end 
// expected portOut[ 11 ]
initial
begin
	portOut_expected[11] = 1'bX;
	portOut_expected[11] = #999000 1'b0;
end 
// expected portOut[ 10 ]
initial
begin
	portOut_expected[10] = 1'bX;
	portOut_expected[10] = #999000 1'b0;
end 
// expected portOut[ 9 ]
initial
begin
	portOut_expected[9] = 1'bX;
	portOut_expected[9] = #999000 1'b0;
end 
// expected portOut[ 8 ]
initial
begin
	portOut_expected[8] = 1'bX;
	portOut_expected[8] = #999000 1'b0;
end 
// expected portOut[ 7 ]
initial
begin
	portOut_expected[7] = 1'bX;
	portOut_expected[7] = #999000 1'b0;
end 
// expected portOut[ 6 ]
initial
begin
	portOut_expected[6] = 1'bX;
	portOut_expected[6] = #999000 1'b0;
end 
// expected portOut[ 5 ]
initial
begin
	portOut_expected[5] = 1'bX;
	portOut_expected[5] = #999000 1'b0;
end 
// expected portOut[ 4 ]
initial
begin
	portOut_expected[4] = 1'bX;
	portOut_expected[4] = #999000 1'b0;
end 
// expected portOut[ 3 ]
initial
begin
	portOut_expected[3] = 1'bX;
	portOut_expected[3] = #999000 1'b0;
end 
// expected portOut[ 2 ]
initial
begin
	portOut_expected[2] = 1'bX;
	portOut_expected[2] = #999000 1'b0;
end 
// expected portOut[ 1 ]
initial
begin
	portOut_expected[1] = 1'bX;
	portOut_expected[1] = #999000 1'b0;
end 
// expected portOut[ 0 ]
initial
begin
	portOut_expected[0] = 1'bX;
	portOut_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(PinOut_expected or PinOut or drive_expected or drive or portOut_expected or portOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected PinOut = %b | expected drive = %b | expected portOut = %b | ",PinOut_expected_prev,drive_expected_prev,portOut_expected_prev);
	$display("| real PinOut = %b | real drive = %b | real portOut = %b | ",PinOut_prev,drive_prev,portOut_prev);
`endif
	if (
		( PinOut_expected_prev !== 1'bx ) && ( PinOut_prev !== PinOut_expected_prev )
		&& ((PinOut_expected_prev !== last_PinOut_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PinOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PinOut_expected_prev);
		$display ("     Real value = %b", PinOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PinOut_exp = PinOut_expected_prev;
	end
	if (
		( drive_expected_prev[0] !== 1'bx ) && ( drive_prev[0] !== drive_expected_prev[0] )
		&& ((drive_expected_prev[0] !== last_drive_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[0] = drive_expected_prev[0];
	end
	if (
		( drive_expected_prev[1] !== 1'bx ) && ( drive_prev[1] !== drive_expected_prev[1] )
		&& ((drive_expected_prev[1] !== last_drive_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[1] = drive_expected_prev[1];
	end
	if (
		( drive_expected_prev[2] !== 1'bx ) && ( drive_prev[2] !== drive_expected_prev[2] )
		&& ((drive_expected_prev[2] !== last_drive_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[2] = drive_expected_prev[2];
	end
	if (
		( drive_expected_prev[3] !== 1'bx ) && ( drive_prev[3] !== drive_expected_prev[3] )
		&& ((drive_expected_prev[3] !== last_drive_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[3] = drive_expected_prev[3];
	end
	if (
		( drive_expected_prev[4] !== 1'bx ) && ( drive_prev[4] !== drive_expected_prev[4] )
		&& ((drive_expected_prev[4] !== last_drive_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[4] = drive_expected_prev[4];
	end
	if (
		( drive_expected_prev[5] !== 1'bx ) && ( drive_prev[5] !== drive_expected_prev[5] )
		&& ((drive_expected_prev[5] !== last_drive_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[5] = drive_expected_prev[5];
	end
	if (
		( drive_expected_prev[6] !== 1'bx ) && ( drive_prev[6] !== drive_expected_prev[6] )
		&& ((drive_expected_prev[6] !== last_drive_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[6] = drive_expected_prev[6];
	end
	if (
		( drive_expected_prev[7] !== 1'bx ) && ( drive_prev[7] !== drive_expected_prev[7] )
		&& ((drive_expected_prev[7] !== last_drive_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[7] = drive_expected_prev[7];
	end
	if (
		( drive_expected_prev[8] !== 1'bx ) && ( drive_prev[8] !== drive_expected_prev[8] )
		&& ((drive_expected_prev[8] !== last_drive_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[8] = drive_expected_prev[8];
	end
	if (
		( drive_expected_prev[9] !== 1'bx ) && ( drive_prev[9] !== drive_expected_prev[9] )
		&& ((drive_expected_prev[9] !== last_drive_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[9] = drive_expected_prev[9];
	end
	if (
		( drive_expected_prev[10] !== 1'bx ) && ( drive_prev[10] !== drive_expected_prev[10] )
		&& ((drive_expected_prev[10] !== last_drive_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[10] = drive_expected_prev[10];
	end
	if (
		( drive_expected_prev[11] !== 1'bx ) && ( drive_prev[11] !== drive_expected_prev[11] )
		&& ((drive_expected_prev[11] !== last_drive_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[11] = drive_expected_prev[11];
	end
	if (
		( drive_expected_prev[12] !== 1'bx ) && ( drive_prev[12] !== drive_expected_prev[12] )
		&& ((drive_expected_prev[12] !== last_drive_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[12] = drive_expected_prev[12];
	end
	if (
		( drive_expected_prev[13] !== 1'bx ) && ( drive_prev[13] !== drive_expected_prev[13] )
		&& ((drive_expected_prev[13] !== last_drive_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[13] = drive_expected_prev[13];
	end
	if (
		( drive_expected_prev[14] !== 1'bx ) && ( drive_prev[14] !== drive_expected_prev[14] )
		&& ((drive_expected_prev[14] !== last_drive_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[14] = drive_expected_prev[14];
	end
	if (
		( drive_expected_prev[15] !== 1'bx ) && ( drive_prev[15] !== drive_expected_prev[15] )
		&& ((drive_expected_prev[15] !== last_drive_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[15] = drive_expected_prev[15];
	end
	if (
		( drive_expected_prev[16] !== 1'bx ) && ( drive_prev[16] !== drive_expected_prev[16] )
		&& ((drive_expected_prev[16] !== last_drive_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[16] = drive_expected_prev[16];
	end
	if (
		( drive_expected_prev[17] !== 1'bx ) && ( drive_prev[17] !== drive_expected_prev[17] )
		&& ((drive_expected_prev[17] !== last_drive_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[17] = drive_expected_prev[17];
	end
	if (
		( drive_expected_prev[18] !== 1'bx ) && ( drive_prev[18] !== drive_expected_prev[18] )
		&& ((drive_expected_prev[18] !== last_drive_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[18] = drive_expected_prev[18];
	end
	if (
		( drive_expected_prev[19] !== 1'bx ) && ( drive_prev[19] !== drive_expected_prev[19] )
		&& ((drive_expected_prev[19] !== last_drive_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[19] = drive_expected_prev[19];
	end
	if (
		( drive_expected_prev[20] !== 1'bx ) && ( drive_prev[20] !== drive_expected_prev[20] )
		&& ((drive_expected_prev[20] !== last_drive_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[20] = drive_expected_prev[20];
	end
	if (
		( drive_expected_prev[21] !== 1'bx ) && ( drive_prev[21] !== drive_expected_prev[21] )
		&& ((drive_expected_prev[21] !== last_drive_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[21] = drive_expected_prev[21];
	end
	if (
		( drive_expected_prev[22] !== 1'bx ) && ( drive_prev[22] !== drive_expected_prev[22] )
		&& ((drive_expected_prev[22] !== last_drive_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[22] = drive_expected_prev[22];
	end
	if (
		( drive_expected_prev[23] !== 1'bx ) && ( drive_prev[23] !== drive_expected_prev[23] )
		&& ((drive_expected_prev[23] !== last_drive_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[23] = drive_expected_prev[23];
	end
	if (
		( drive_expected_prev[24] !== 1'bx ) && ( drive_prev[24] !== drive_expected_prev[24] )
		&& ((drive_expected_prev[24] !== last_drive_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[24] = drive_expected_prev[24];
	end
	if (
		( drive_expected_prev[25] !== 1'bx ) && ( drive_prev[25] !== drive_expected_prev[25] )
		&& ((drive_expected_prev[25] !== last_drive_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[25] = drive_expected_prev[25];
	end
	if (
		( drive_expected_prev[26] !== 1'bx ) && ( drive_prev[26] !== drive_expected_prev[26] )
		&& ((drive_expected_prev[26] !== last_drive_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[26] = drive_expected_prev[26];
	end
	if (
		( drive_expected_prev[27] !== 1'bx ) && ( drive_prev[27] !== drive_expected_prev[27] )
		&& ((drive_expected_prev[27] !== last_drive_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[27] = drive_expected_prev[27];
	end
	if (
		( drive_expected_prev[28] !== 1'bx ) && ( drive_prev[28] !== drive_expected_prev[28] )
		&& ((drive_expected_prev[28] !== last_drive_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[28] = drive_expected_prev[28];
	end
	if (
		( drive_expected_prev[29] !== 1'bx ) && ( drive_prev[29] !== drive_expected_prev[29] )
		&& ((drive_expected_prev[29] !== last_drive_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[29] = drive_expected_prev[29];
	end
	if (
		( drive_expected_prev[30] !== 1'bx ) && ( drive_prev[30] !== drive_expected_prev[30] )
		&& ((drive_expected_prev[30] !== last_drive_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[30] = drive_expected_prev[30];
	end
	if (
		( drive_expected_prev[31] !== 1'bx ) && ( drive_prev[31] !== drive_expected_prev[31] )
		&& ((drive_expected_prev[31] !== last_drive_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port drive[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", drive_expected_prev);
		$display ("     Real value = %b", drive_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_drive_exp[31] = drive_expected_prev[31];
	end
	if (
		( portOut_expected_prev[0] !== 1'bx ) && ( portOut_prev[0] !== portOut_expected_prev[0] )
		&& ((portOut_expected_prev[0] !== last_portOut_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[0] = portOut_expected_prev[0];
	end
	if (
		( portOut_expected_prev[1] !== 1'bx ) && ( portOut_prev[1] !== portOut_expected_prev[1] )
		&& ((portOut_expected_prev[1] !== last_portOut_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[1] = portOut_expected_prev[1];
	end
	if (
		( portOut_expected_prev[2] !== 1'bx ) && ( portOut_prev[2] !== portOut_expected_prev[2] )
		&& ((portOut_expected_prev[2] !== last_portOut_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[2] = portOut_expected_prev[2];
	end
	if (
		( portOut_expected_prev[3] !== 1'bx ) && ( portOut_prev[3] !== portOut_expected_prev[3] )
		&& ((portOut_expected_prev[3] !== last_portOut_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[3] = portOut_expected_prev[3];
	end
	if (
		( portOut_expected_prev[4] !== 1'bx ) && ( portOut_prev[4] !== portOut_expected_prev[4] )
		&& ((portOut_expected_prev[4] !== last_portOut_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[4] = portOut_expected_prev[4];
	end
	if (
		( portOut_expected_prev[5] !== 1'bx ) && ( portOut_prev[5] !== portOut_expected_prev[5] )
		&& ((portOut_expected_prev[5] !== last_portOut_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[5] = portOut_expected_prev[5];
	end
	if (
		( portOut_expected_prev[6] !== 1'bx ) && ( portOut_prev[6] !== portOut_expected_prev[6] )
		&& ((portOut_expected_prev[6] !== last_portOut_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[6] = portOut_expected_prev[6];
	end
	if (
		( portOut_expected_prev[7] !== 1'bx ) && ( portOut_prev[7] !== portOut_expected_prev[7] )
		&& ((portOut_expected_prev[7] !== last_portOut_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[7] = portOut_expected_prev[7];
	end
	if (
		( portOut_expected_prev[8] !== 1'bx ) && ( portOut_prev[8] !== portOut_expected_prev[8] )
		&& ((portOut_expected_prev[8] !== last_portOut_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[8] = portOut_expected_prev[8];
	end
	if (
		( portOut_expected_prev[9] !== 1'bx ) && ( portOut_prev[9] !== portOut_expected_prev[9] )
		&& ((portOut_expected_prev[9] !== last_portOut_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[9] = portOut_expected_prev[9];
	end
	if (
		( portOut_expected_prev[10] !== 1'bx ) && ( portOut_prev[10] !== portOut_expected_prev[10] )
		&& ((portOut_expected_prev[10] !== last_portOut_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[10] = portOut_expected_prev[10];
	end
	if (
		( portOut_expected_prev[11] !== 1'bx ) && ( portOut_prev[11] !== portOut_expected_prev[11] )
		&& ((portOut_expected_prev[11] !== last_portOut_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[11] = portOut_expected_prev[11];
	end
	if (
		( portOut_expected_prev[12] !== 1'bx ) && ( portOut_prev[12] !== portOut_expected_prev[12] )
		&& ((portOut_expected_prev[12] !== last_portOut_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[12] = portOut_expected_prev[12];
	end
	if (
		( portOut_expected_prev[13] !== 1'bx ) && ( portOut_prev[13] !== portOut_expected_prev[13] )
		&& ((portOut_expected_prev[13] !== last_portOut_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[13] = portOut_expected_prev[13];
	end
	if (
		( portOut_expected_prev[14] !== 1'bx ) && ( portOut_prev[14] !== portOut_expected_prev[14] )
		&& ((portOut_expected_prev[14] !== last_portOut_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[14] = portOut_expected_prev[14];
	end
	if (
		( portOut_expected_prev[15] !== 1'bx ) && ( portOut_prev[15] !== portOut_expected_prev[15] )
		&& ((portOut_expected_prev[15] !== last_portOut_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_portOut_exp[15] = portOut_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MCU2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg exINT;
reg [15:0] portIn;
reg rst;
// wires                                               
wire PinOut;
wire [31:0] drive;
wire [15:0] portOut;

wire sampler;                             

// assign statements (if any)                          
MCU2 i1 (
// port map - connection between master ports and signals/registers   
	.PinOut(PinOut),
	.clk(clk),
	.drive(drive),
	.exINT(exINT),
	.portIn(portIn),
	.portOut(portOut),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// exINT
initial
begin
	exINT = 1'b0;
end 
// portIn[ 15 ]
initial
begin
	portIn[15] = 1'b0;
end 
// portIn[ 14 ]
initial
begin
	portIn[14] = 1'b0;
end 
// portIn[ 13 ]
initial
begin
	portIn[13] = 1'b0;
end 
// portIn[ 12 ]
initial
begin
	portIn[12] = 1'b0;
end 
// portIn[ 11 ]
initial
begin
	portIn[11] = 1'b0;
end 
// portIn[ 10 ]
initial
begin
	portIn[10] = 1'b0;
end 
// portIn[ 9 ]
initial
begin
	portIn[9] = 1'b0;
end 
// portIn[ 8 ]
initial
begin
	portIn[8] = 1'b0;
end 
// portIn[ 7 ]
initial
begin
	portIn[7] = 1'b0;
end 
// portIn[ 6 ]
initial
begin
	portIn[6] = 1'b0;
end 
// portIn[ 5 ]
initial
begin
	portIn[5] = 1'b1;
end 
// portIn[ 4 ]
initial
begin
	portIn[4] = 1'b1;
end 
// portIn[ 3 ]
initial
begin
	portIn[3] = 1'b1;
end 
// portIn[ 2 ]
initial
begin
	portIn[2] = 1'b0;
end 
// portIn[ 1 ]
initial
begin
	portIn[1] = 1'b0;
end 
// portIn[ 0 ]
initial
begin
	portIn[0] = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 

MCU2_vlg_sample_tst tb_sample (
	.clk(clk),
	.exINT(exINT),
	.portIn(portIn),
	.rst(rst),
	.sampler_tx(sampler)
);

MCU2_vlg_check_tst tb_out(
	.PinOut(PinOut),
	.drive(drive),
	.portOut(portOut),
	.sampler_rx(sampler)
);
endmodule

