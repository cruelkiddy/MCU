// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/28/2019 13:08:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MCU2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MCU2_vlg_sample_tst(
	clk,
	portIn,
	rst,
	sampler_tx
);
input  clk;
input [15:0] portIn;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or portIn or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MCU2_vlg_check_tst (
	Macc,
	MaccH,
	McodeOut,
	portOut,
	testout,
	sampler_rx
);
input [15:0] Macc;
input [15:0] MaccH;
input [15:0] McodeOut;
input [15:0] portOut;
input [15:0] testout;
input sampler_rx;

reg [15:0] Macc_expected;
reg [15:0] MaccH_expected;
reg [15:0] McodeOut_expected;
reg [15:0] portOut_expected;
reg [15:0] testout_expected;

reg [15:0] Macc_prev;
reg [15:0] MaccH_prev;
reg [15:0] McodeOut_prev;
reg [15:0] portOut_prev;
reg [15:0] testout_prev;

reg [15:0] Macc_expected_prev;
reg [15:0] MaccH_expected_prev;
reg [15:0] McodeOut_expected_prev;
reg [15:0] portOut_expected_prev;
reg [15:0] testout_expected_prev;

reg [15:0] last_Macc_exp;
reg [15:0] last_MaccH_exp;
reg [15:0] last_McodeOut_exp;
reg [15:0] last_portOut_exp;
reg [15:0] last_testout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Macc_prev = Macc;
	MaccH_prev = MaccH;
	McodeOut_prev = McodeOut;
	portOut_prev = portOut;
	testout_prev = testout;
end

// update expected /o prevs

always @(trigger)
begin
	Macc_expected_prev = Macc_expected;
	MaccH_expected_prev = MaccH_expected;
	McodeOut_expected_prev = McodeOut_expected;
	portOut_expected_prev = portOut_expected;
	testout_expected_prev = testout_expected;
end


// expected Macc[ 15 ]
initial
begin
	Macc_expected[15] = 1'bX;
end 
// expected Macc[ 14 ]
initial
begin
	Macc_expected[14] = 1'bX;
end 
// expected Macc[ 13 ]
initial
begin
	Macc_expected[13] = 1'bX;
end 
// expected Macc[ 12 ]
initial
begin
	Macc_expected[12] = 1'bX;
end 
// expected Macc[ 11 ]
initial
begin
	Macc_expected[11] = 1'bX;
end 
// expected Macc[ 10 ]
initial
begin
	Macc_expected[10] = 1'bX;
end 
// expected Macc[ 9 ]
initial
begin
	Macc_expected[9] = 1'bX;
end 
// expected Macc[ 8 ]
initial
begin
	Macc_expected[8] = 1'bX;
end 
// expected Macc[ 7 ]
initial
begin
	Macc_expected[7] = 1'bX;
end 
// expected Macc[ 6 ]
initial
begin
	Macc_expected[6] = 1'bX;
end 
// expected Macc[ 5 ]
initial
begin
	Macc_expected[5] = 1'bX;
end 
// expected Macc[ 4 ]
initial
begin
	Macc_expected[4] = 1'bX;
end 
// expected Macc[ 3 ]
initial
begin
	Macc_expected[3] = 1'bX;
end 
// expected Macc[ 2 ]
initial
begin
	Macc_expected[2] = 1'bX;
end 
// expected Macc[ 1 ]
initial
begin
	Macc_expected[1] = 1'bX;
end 
// expected Macc[ 0 ]
initial
begin
	Macc_expected[0] = 1'bX;
end 
// expected MaccH[ 15 ]
initial
begin
	MaccH_expected[15] = 1'bX;
end 
// expected MaccH[ 14 ]
initial
begin
	MaccH_expected[14] = 1'bX;
end 
// expected MaccH[ 13 ]
initial
begin
	MaccH_expected[13] = 1'bX;
end 
// expected MaccH[ 12 ]
initial
begin
	MaccH_expected[12] = 1'bX;
end 
// expected MaccH[ 11 ]
initial
begin
	MaccH_expected[11] = 1'bX;
end 
// expected MaccH[ 10 ]
initial
begin
	MaccH_expected[10] = 1'bX;
end 
// expected MaccH[ 9 ]
initial
begin
	MaccH_expected[9] = 1'bX;
end 
// expected MaccH[ 8 ]
initial
begin
	MaccH_expected[8] = 1'bX;
end 
// expected MaccH[ 7 ]
initial
begin
	MaccH_expected[7] = 1'bX;
end 
// expected MaccH[ 6 ]
initial
begin
	MaccH_expected[6] = 1'bX;
end 
// expected MaccH[ 5 ]
initial
begin
	MaccH_expected[5] = 1'bX;
end 
// expected MaccH[ 4 ]
initial
begin
	MaccH_expected[4] = 1'bX;
end 
// expected MaccH[ 3 ]
initial
begin
	MaccH_expected[3] = 1'bX;
end 
// expected MaccH[ 2 ]
initial
begin
	MaccH_expected[2] = 1'bX;
end 
// expected MaccH[ 1 ]
initial
begin
	MaccH_expected[1] = 1'bX;
end 
// expected MaccH[ 0 ]
initial
begin
	MaccH_expected[0] = 1'bX;
end 
// expected McodeOut[ 15 ]
initial
begin
	McodeOut_expected[15] = 1'bX;
end 
// expected McodeOut[ 14 ]
initial
begin
	McodeOut_expected[14] = 1'bX;
end 
// expected McodeOut[ 13 ]
initial
begin
	McodeOut_expected[13] = 1'bX;
end 
// expected McodeOut[ 12 ]
initial
begin
	McodeOut_expected[12] = 1'bX;
end 
// expected McodeOut[ 11 ]
initial
begin
	McodeOut_expected[11] = 1'bX;
end 
// expected McodeOut[ 10 ]
initial
begin
	McodeOut_expected[10] = 1'bX;
end 
// expected McodeOut[ 9 ]
initial
begin
	McodeOut_expected[9] = 1'bX;
end 
// expected McodeOut[ 8 ]
initial
begin
	McodeOut_expected[8] = 1'bX;
end 
// expected McodeOut[ 7 ]
initial
begin
	McodeOut_expected[7] = 1'bX;
end 
// expected McodeOut[ 6 ]
initial
begin
	McodeOut_expected[6] = 1'bX;
end 
// expected McodeOut[ 5 ]
initial
begin
	McodeOut_expected[5] = 1'bX;
end 
// expected McodeOut[ 4 ]
initial
begin
	McodeOut_expected[4] = 1'bX;
end 
// expected McodeOut[ 3 ]
initial
begin
	McodeOut_expected[3] = 1'bX;
end 
// expected McodeOut[ 2 ]
initial
begin
	McodeOut_expected[2] = 1'bX;
end 
// expected McodeOut[ 1 ]
initial
begin
	McodeOut_expected[1] = 1'bX;
end 
// expected McodeOut[ 0 ]
initial
begin
	McodeOut_expected[0] = 1'bX;
end 
// expected portOut[ 15 ]
initial
begin
	portOut_expected[15] = 1'bX;
end 
// expected portOut[ 14 ]
initial
begin
	portOut_expected[14] = 1'bX;
end 
// expected portOut[ 13 ]
initial
begin
	portOut_expected[13] = 1'bX;
end 
// expected portOut[ 12 ]
initial
begin
	portOut_expected[12] = 1'bX;
end 
// expected portOut[ 11 ]
initial
begin
	portOut_expected[11] = 1'bX;
end 
// expected portOut[ 10 ]
initial
begin
	portOut_expected[10] = 1'bX;
end 
// expected portOut[ 9 ]
initial
begin
	portOut_expected[9] = 1'bX;
end 
// expected portOut[ 8 ]
initial
begin
	portOut_expected[8] = 1'bX;
end 
// expected portOut[ 7 ]
initial
begin
	portOut_expected[7] = 1'bX;
end 
// expected portOut[ 6 ]
initial
begin
	portOut_expected[6] = 1'bX;
end 
// expected portOut[ 5 ]
initial
begin
	portOut_expected[5] = 1'bX;
end 
// expected portOut[ 4 ]
initial
begin
	portOut_expected[4] = 1'bX;
end 
// expected portOut[ 3 ]
initial
begin
	portOut_expected[3] = 1'bX;
end 
// expected portOut[ 2 ]
initial
begin
	portOut_expected[2] = 1'bX;
end 
// expected portOut[ 1 ]
initial
begin
	portOut_expected[1] = 1'bX;
end 
// expected portOut[ 0 ]
initial
begin
	portOut_expected[0] = 1'bX;
end 
// expected testout[ 15 ]
initial
begin
	testout_expected[15] = 1'bX;
end 
// expected testout[ 14 ]
initial
begin
	testout_expected[14] = 1'bX;
end 
// expected testout[ 13 ]
initial
begin
	testout_expected[13] = 1'bX;
end 
// expected testout[ 12 ]
initial
begin
	testout_expected[12] = 1'bX;
end 
// expected testout[ 11 ]
initial
begin
	testout_expected[11] = 1'bX;
end 
// expected testout[ 10 ]
initial
begin
	testout_expected[10] = 1'bX;
end 
// expected testout[ 9 ]
initial
begin
	testout_expected[9] = 1'bX;
end 
// expected testout[ 8 ]
initial
begin
	testout_expected[8] = 1'bX;
end 
// expected testout[ 7 ]
initial
begin
	testout_expected[7] = 1'bX;
end 
// expected testout[ 6 ]
initial
begin
	testout_expected[6] = 1'bX;
end 
// expected testout[ 5 ]
initial
begin
	testout_expected[5] = 1'bX;
end 
// expected testout[ 4 ]
initial
begin
	testout_expected[4] = 1'bX;
end 
// expected testout[ 3 ]
initial
begin
	testout_expected[3] = 1'bX;
end 
// expected testout[ 2 ]
initial
begin
	testout_expected[2] = 1'bX;
end 
// expected testout[ 1 ]
initial
begin
	testout_expected[1] = 1'bX;
end 
// expected testout[ 0 ]
initial
begin
	testout_expected[0] = 1'bX;
end 
// generate trigger
always @(Macc_expected or Macc or MaccH_expected or MaccH or McodeOut_expected or McodeOut or portOut_expected or portOut or testout_expected or testout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Macc = %b | expected MaccH = %b | expected McodeOut = %b | expected portOut = %b | expected testout = %b | ",Macc_expected_prev,MaccH_expected_prev,McodeOut_expected_prev,portOut_expected_prev,testout_expected_prev);
	$display("| real Macc = %b | real MaccH = %b | real McodeOut = %b | real portOut = %b | real testout = %b | ",Macc_prev,MaccH_prev,McodeOut_prev,portOut_prev,testout_prev);
`endif
	if (
		( Macc_expected_prev[0] !== 1'bx ) && ( Macc_prev[0] !== Macc_expected_prev[0] )
		&& ((Macc_expected_prev[0] !== last_Macc_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[0] = Macc_expected_prev[0];
	end
	if (
		( Macc_expected_prev[1] !== 1'bx ) && ( Macc_prev[1] !== Macc_expected_prev[1] )
		&& ((Macc_expected_prev[1] !== last_Macc_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[1] = Macc_expected_prev[1];
	end
	if (
		( Macc_expected_prev[2] !== 1'bx ) && ( Macc_prev[2] !== Macc_expected_prev[2] )
		&& ((Macc_expected_prev[2] !== last_Macc_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[2] = Macc_expected_prev[2];
	end
	if (
		( Macc_expected_prev[3] !== 1'bx ) && ( Macc_prev[3] !== Macc_expected_prev[3] )
		&& ((Macc_expected_prev[3] !== last_Macc_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[3] = Macc_expected_prev[3];
	end
	if (
		( Macc_expected_prev[4] !== 1'bx ) && ( Macc_prev[4] !== Macc_expected_prev[4] )
		&& ((Macc_expected_prev[4] !== last_Macc_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[4] = Macc_expected_prev[4];
	end
	if (
		( Macc_expected_prev[5] !== 1'bx ) && ( Macc_prev[5] !== Macc_expected_prev[5] )
		&& ((Macc_expected_prev[5] !== last_Macc_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[5] = Macc_expected_prev[5];
	end
	if (
		( Macc_expected_prev[6] !== 1'bx ) && ( Macc_prev[6] !== Macc_expected_prev[6] )
		&& ((Macc_expected_prev[6] !== last_Macc_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[6] = Macc_expected_prev[6];
	end
	if (
		( Macc_expected_prev[7] !== 1'bx ) && ( Macc_prev[7] !== Macc_expected_prev[7] )
		&& ((Macc_expected_prev[7] !== last_Macc_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[7] = Macc_expected_prev[7];
	end
	if (
		( Macc_expected_prev[8] !== 1'bx ) && ( Macc_prev[8] !== Macc_expected_prev[8] )
		&& ((Macc_expected_prev[8] !== last_Macc_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[8] = Macc_expected_prev[8];
	end
	if (
		( Macc_expected_prev[9] !== 1'bx ) && ( Macc_prev[9] !== Macc_expected_prev[9] )
		&& ((Macc_expected_prev[9] !== last_Macc_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[9] = Macc_expected_prev[9];
	end
	if (
		( Macc_expected_prev[10] !== 1'bx ) && ( Macc_prev[10] !== Macc_expected_prev[10] )
		&& ((Macc_expected_prev[10] !== last_Macc_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[10] = Macc_expected_prev[10];
	end
	if (
		( Macc_expected_prev[11] !== 1'bx ) && ( Macc_prev[11] !== Macc_expected_prev[11] )
		&& ((Macc_expected_prev[11] !== last_Macc_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[11] = Macc_expected_prev[11];
	end
	if (
		( Macc_expected_prev[12] !== 1'bx ) && ( Macc_prev[12] !== Macc_expected_prev[12] )
		&& ((Macc_expected_prev[12] !== last_Macc_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[12] = Macc_expected_prev[12];
	end
	if (
		( Macc_expected_prev[13] !== 1'bx ) && ( Macc_prev[13] !== Macc_expected_prev[13] )
		&& ((Macc_expected_prev[13] !== last_Macc_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[13] = Macc_expected_prev[13];
	end
	if (
		( Macc_expected_prev[14] !== 1'bx ) && ( Macc_prev[14] !== Macc_expected_prev[14] )
		&& ((Macc_expected_prev[14] !== last_Macc_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[14] = Macc_expected_prev[14];
	end
	if (
		( Macc_expected_prev[15] !== 1'bx ) && ( Macc_prev[15] !== Macc_expected_prev[15] )
		&& ((Macc_expected_prev[15] !== last_Macc_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Macc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Macc_expected_prev);
		$display ("     Real value = %b", Macc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Macc_exp[15] = Macc_expected_prev[15];
	end
	if (
		( MaccH_expected_prev[0] !== 1'bx ) && ( MaccH_prev[0] !== MaccH_expected_prev[0] )
		&& ((MaccH_expected_prev[0] !== last_MaccH_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[0] = MaccH_expected_prev[0];
	end
	if (
		( MaccH_expected_prev[1] !== 1'bx ) && ( MaccH_prev[1] !== MaccH_expected_prev[1] )
		&& ((MaccH_expected_prev[1] !== last_MaccH_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[1] = MaccH_expected_prev[1];
	end
	if (
		( MaccH_expected_prev[2] !== 1'bx ) && ( MaccH_prev[2] !== MaccH_expected_prev[2] )
		&& ((MaccH_expected_prev[2] !== last_MaccH_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[2] = MaccH_expected_prev[2];
	end
	if (
		( MaccH_expected_prev[3] !== 1'bx ) && ( MaccH_prev[3] !== MaccH_expected_prev[3] )
		&& ((MaccH_expected_prev[3] !== last_MaccH_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[3] = MaccH_expected_prev[3];
	end
	if (
		( MaccH_expected_prev[4] !== 1'bx ) && ( MaccH_prev[4] !== MaccH_expected_prev[4] )
		&& ((MaccH_expected_prev[4] !== last_MaccH_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[4] = MaccH_expected_prev[4];
	end
	if (
		( MaccH_expected_prev[5] !== 1'bx ) && ( MaccH_prev[5] !== MaccH_expected_prev[5] )
		&& ((MaccH_expected_prev[5] !== last_MaccH_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[5] = MaccH_expected_prev[5];
	end
	if (
		( MaccH_expected_prev[6] !== 1'bx ) && ( MaccH_prev[6] !== MaccH_expected_prev[6] )
		&& ((MaccH_expected_prev[6] !== last_MaccH_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[6] = MaccH_expected_prev[6];
	end
	if (
		( MaccH_expected_prev[7] !== 1'bx ) && ( MaccH_prev[7] !== MaccH_expected_prev[7] )
		&& ((MaccH_expected_prev[7] !== last_MaccH_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[7] = MaccH_expected_prev[7];
	end
	if (
		( MaccH_expected_prev[8] !== 1'bx ) && ( MaccH_prev[8] !== MaccH_expected_prev[8] )
		&& ((MaccH_expected_prev[8] !== last_MaccH_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[8] = MaccH_expected_prev[8];
	end
	if (
		( MaccH_expected_prev[9] !== 1'bx ) && ( MaccH_prev[9] !== MaccH_expected_prev[9] )
		&& ((MaccH_expected_prev[9] !== last_MaccH_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[9] = MaccH_expected_prev[9];
	end
	if (
		( MaccH_expected_prev[10] !== 1'bx ) && ( MaccH_prev[10] !== MaccH_expected_prev[10] )
		&& ((MaccH_expected_prev[10] !== last_MaccH_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[10] = MaccH_expected_prev[10];
	end
	if (
		( MaccH_expected_prev[11] !== 1'bx ) && ( MaccH_prev[11] !== MaccH_expected_prev[11] )
		&& ((MaccH_expected_prev[11] !== last_MaccH_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[11] = MaccH_expected_prev[11];
	end
	if (
		( MaccH_expected_prev[12] !== 1'bx ) && ( MaccH_prev[12] !== MaccH_expected_prev[12] )
		&& ((MaccH_expected_prev[12] !== last_MaccH_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[12] = MaccH_expected_prev[12];
	end
	if (
		( MaccH_expected_prev[13] !== 1'bx ) && ( MaccH_prev[13] !== MaccH_expected_prev[13] )
		&& ((MaccH_expected_prev[13] !== last_MaccH_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[13] = MaccH_expected_prev[13];
	end
	if (
		( MaccH_expected_prev[14] !== 1'bx ) && ( MaccH_prev[14] !== MaccH_expected_prev[14] )
		&& ((MaccH_expected_prev[14] !== last_MaccH_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[14] = MaccH_expected_prev[14];
	end
	if (
		( MaccH_expected_prev[15] !== 1'bx ) && ( MaccH_prev[15] !== MaccH_expected_prev[15] )
		&& ((MaccH_expected_prev[15] !== last_MaccH_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MaccH[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MaccH_expected_prev);
		$display ("     Real value = %b", MaccH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MaccH_exp[15] = MaccH_expected_prev[15];
	end
	if (
		( McodeOut_expected_prev[0] !== 1'bx ) && ( McodeOut_prev[0] !== McodeOut_expected_prev[0] )
		&& ((McodeOut_expected_prev[0] !== last_McodeOut_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[0] = McodeOut_expected_prev[0];
	end
	if (
		( McodeOut_expected_prev[1] !== 1'bx ) && ( McodeOut_prev[1] !== McodeOut_expected_prev[1] )
		&& ((McodeOut_expected_prev[1] !== last_McodeOut_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[1] = McodeOut_expected_prev[1];
	end
	if (
		( McodeOut_expected_prev[2] !== 1'bx ) && ( McodeOut_prev[2] !== McodeOut_expected_prev[2] )
		&& ((McodeOut_expected_prev[2] !== last_McodeOut_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[2] = McodeOut_expected_prev[2];
	end
	if (
		( McodeOut_expected_prev[3] !== 1'bx ) && ( McodeOut_prev[3] !== McodeOut_expected_prev[3] )
		&& ((McodeOut_expected_prev[3] !== last_McodeOut_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[3] = McodeOut_expected_prev[3];
	end
	if (
		( McodeOut_expected_prev[4] !== 1'bx ) && ( McodeOut_prev[4] !== McodeOut_expected_prev[4] )
		&& ((McodeOut_expected_prev[4] !== last_McodeOut_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[4] = McodeOut_expected_prev[4];
	end
	if (
		( McodeOut_expected_prev[5] !== 1'bx ) && ( McodeOut_prev[5] !== McodeOut_expected_prev[5] )
		&& ((McodeOut_expected_prev[5] !== last_McodeOut_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[5] = McodeOut_expected_prev[5];
	end
	if (
		( McodeOut_expected_prev[6] !== 1'bx ) && ( McodeOut_prev[6] !== McodeOut_expected_prev[6] )
		&& ((McodeOut_expected_prev[6] !== last_McodeOut_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[6] = McodeOut_expected_prev[6];
	end
	if (
		( McodeOut_expected_prev[7] !== 1'bx ) && ( McodeOut_prev[7] !== McodeOut_expected_prev[7] )
		&& ((McodeOut_expected_prev[7] !== last_McodeOut_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[7] = McodeOut_expected_prev[7];
	end
	if (
		( McodeOut_expected_prev[8] !== 1'bx ) && ( McodeOut_prev[8] !== McodeOut_expected_prev[8] )
		&& ((McodeOut_expected_prev[8] !== last_McodeOut_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[8] = McodeOut_expected_prev[8];
	end
	if (
		( McodeOut_expected_prev[9] !== 1'bx ) && ( McodeOut_prev[9] !== McodeOut_expected_prev[9] )
		&& ((McodeOut_expected_prev[9] !== last_McodeOut_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[9] = McodeOut_expected_prev[9];
	end
	if (
		( McodeOut_expected_prev[10] !== 1'bx ) && ( McodeOut_prev[10] !== McodeOut_expected_prev[10] )
		&& ((McodeOut_expected_prev[10] !== last_McodeOut_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[10] = McodeOut_expected_prev[10];
	end
	if (
		( McodeOut_expected_prev[11] !== 1'bx ) && ( McodeOut_prev[11] !== McodeOut_expected_prev[11] )
		&& ((McodeOut_expected_prev[11] !== last_McodeOut_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[11] = McodeOut_expected_prev[11];
	end
	if (
		( McodeOut_expected_prev[12] !== 1'bx ) && ( McodeOut_prev[12] !== McodeOut_expected_prev[12] )
		&& ((McodeOut_expected_prev[12] !== last_McodeOut_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[12] = McodeOut_expected_prev[12];
	end
	if (
		( McodeOut_expected_prev[13] !== 1'bx ) && ( McodeOut_prev[13] !== McodeOut_expected_prev[13] )
		&& ((McodeOut_expected_prev[13] !== last_McodeOut_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[13] = McodeOut_expected_prev[13];
	end
	if (
		( McodeOut_expected_prev[14] !== 1'bx ) && ( McodeOut_prev[14] !== McodeOut_expected_prev[14] )
		&& ((McodeOut_expected_prev[14] !== last_McodeOut_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[14] = McodeOut_expected_prev[14];
	end
	if (
		( McodeOut_expected_prev[15] !== 1'bx ) && ( McodeOut_prev[15] !== McodeOut_expected_prev[15] )
		&& ((McodeOut_expected_prev[15] !== last_McodeOut_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port McodeOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", McodeOut_expected_prev);
		$display ("     Real value = %b", McodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_McodeOut_exp[15] = McodeOut_expected_prev[15];
	end
	if (
		( portOut_expected_prev[0] !== 1'bx ) && ( portOut_prev[0] !== portOut_expected_prev[0] )
		&& ((portOut_expected_prev[0] !== last_portOut_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[0] = portOut_expected_prev[0];
	end
	if (
		( portOut_expected_prev[1] !== 1'bx ) && ( portOut_prev[1] !== portOut_expected_prev[1] )
		&& ((portOut_expected_prev[1] !== last_portOut_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[1] = portOut_expected_prev[1];
	end
	if (
		( portOut_expected_prev[2] !== 1'bx ) && ( portOut_prev[2] !== portOut_expected_prev[2] )
		&& ((portOut_expected_prev[2] !== last_portOut_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[2] = portOut_expected_prev[2];
	end
	if (
		( portOut_expected_prev[3] !== 1'bx ) && ( portOut_prev[3] !== portOut_expected_prev[3] )
		&& ((portOut_expected_prev[3] !== last_portOut_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[3] = portOut_expected_prev[3];
	end
	if (
		( portOut_expected_prev[4] !== 1'bx ) && ( portOut_prev[4] !== portOut_expected_prev[4] )
		&& ((portOut_expected_prev[4] !== last_portOut_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[4] = portOut_expected_prev[4];
	end
	if (
		( portOut_expected_prev[5] !== 1'bx ) && ( portOut_prev[5] !== portOut_expected_prev[5] )
		&& ((portOut_expected_prev[5] !== last_portOut_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[5] = portOut_expected_prev[5];
	end
	if (
		( portOut_expected_prev[6] !== 1'bx ) && ( portOut_prev[6] !== portOut_expected_prev[6] )
		&& ((portOut_expected_prev[6] !== last_portOut_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[6] = portOut_expected_prev[6];
	end
	if (
		( portOut_expected_prev[7] !== 1'bx ) && ( portOut_prev[7] !== portOut_expected_prev[7] )
		&& ((portOut_expected_prev[7] !== last_portOut_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[7] = portOut_expected_prev[7];
	end
	if (
		( portOut_expected_prev[8] !== 1'bx ) && ( portOut_prev[8] !== portOut_expected_prev[8] )
		&& ((portOut_expected_prev[8] !== last_portOut_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[8] = portOut_expected_prev[8];
	end
	if (
		( portOut_expected_prev[9] !== 1'bx ) && ( portOut_prev[9] !== portOut_expected_prev[9] )
		&& ((portOut_expected_prev[9] !== last_portOut_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[9] = portOut_expected_prev[9];
	end
	if (
		( portOut_expected_prev[10] !== 1'bx ) && ( portOut_prev[10] !== portOut_expected_prev[10] )
		&& ((portOut_expected_prev[10] !== last_portOut_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[10] = portOut_expected_prev[10];
	end
	if (
		( portOut_expected_prev[11] !== 1'bx ) && ( portOut_prev[11] !== portOut_expected_prev[11] )
		&& ((portOut_expected_prev[11] !== last_portOut_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[11] = portOut_expected_prev[11];
	end
	if (
		( portOut_expected_prev[12] !== 1'bx ) && ( portOut_prev[12] !== portOut_expected_prev[12] )
		&& ((portOut_expected_prev[12] !== last_portOut_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[12] = portOut_expected_prev[12];
	end
	if (
		( portOut_expected_prev[13] !== 1'bx ) && ( portOut_prev[13] !== portOut_expected_prev[13] )
		&& ((portOut_expected_prev[13] !== last_portOut_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[13] = portOut_expected_prev[13];
	end
	if (
		( portOut_expected_prev[14] !== 1'bx ) && ( portOut_prev[14] !== portOut_expected_prev[14] )
		&& ((portOut_expected_prev[14] !== last_portOut_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[14] = portOut_expected_prev[14];
	end
	if (
		( portOut_expected_prev[15] !== 1'bx ) && ( portOut_prev[15] !== portOut_expected_prev[15] )
		&& ((portOut_expected_prev[15] !== last_portOut_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port portOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", portOut_expected_prev);
		$display ("     Real value = %b", portOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_portOut_exp[15] = portOut_expected_prev[15];
	end
	if (
		( testout_expected_prev[0] !== 1'bx ) && ( testout_prev[0] !== testout_expected_prev[0] )
		&& ((testout_expected_prev[0] !== last_testout_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[0] = testout_expected_prev[0];
	end
	if (
		( testout_expected_prev[1] !== 1'bx ) && ( testout_prev[1] !== testout_expected_prev[1] )
		&& ((testout_expected_prev[1] !== last_testout_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[1] = testout_expected_prev[1];
	end
	if (
		( testout_expected_prev[2] !== 1'bx ) && ( testout_prev[2] !== testout_expected_prev[2] )
		&& ((testout_expected_prev[2] !== last_testout_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[2] = testout_expected_prev[2];
	end
	if (
		( testout_expected_prev[3] !== 1'bx ) && ( testout_prev[3] !== testout_expected_prev[3] )
		&& ((testout_expected_prev[3] !== last_testout_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[3] = testout_expected_prev[3];
	end
	if (
		( testout_expected_prev[4] !== 1'bx ) && ( testout_prev[4] !== testout_expected_prev[4] )
		&& ((testout_expected_prev[4] !== last_testout_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[4] = testout_expected_prev[4];
	end
	if (
		( testout_expected_prev[5] !== 1'bx ) && ( testout_prev[5] !== testout_expected_prev[5] )
		&& ((testout_expected_prev[5] !== last_testout_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[5] = testout_expected_prev[5];
	end
	if (
		( testout_expected_prev[6] !== 1'bx ) && ( testout_prev[6] !== testout_expected_prev[6] )
		&& ((testout_expected_prev[6] !== last_testout_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[6] = testout_expected_prev[6];
	end
	if (
		( testout_expected_prev[7] !== 1'bx ) && ( testout_prev[7] !== testout_expected_prev[7] )
		&& ((testout_expected_prev[7] !== last_testout_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[7] = testout_expected_prev[7];
	end
	if (
		( testout_expected_prev[8] !== 1'bx ) && ( testout_prev[8] !== testout_expected_prev[8] )
		&& ((testout_expected_prev[8] !== last_testout_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[8] = testout_expected_prev[8];
	end
	if (
		( testout_expected_prev[9] !== 1'bx ) && ( testout_prev[9] !== testout_expected_prev[9] )
		&& ((testout_expected_prev[9] !== last_testout_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[9] = testout_expected_prev[9];
	end
	if (
		( testout_expected_prev[10] !== 1'bx ) && ( testout_prev[10] !== testout_expected_prev[10] )
		&& ((testout_expected_prev[10] !== last_testout_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[10] = testout_expected_prev[10];
	end
	if (
		( testout_expected_prev[11] !== 1'bx ) && ( testout_prev[11] !== testout_expected_prev[11] )
		&& ((testout_expected_prev[11] !== last_testout_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[11] = testout_expected_prev[11];
	end
	if (
		( testout_expected_prev[12] !== 1'bx ) && ( testout_prev[12] !== testout_expected_prev[12] )
		&& ((testout_expected_prev[12] !== last_testout_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[12] = testout_expected_prev[12];
	end
	if (
		( testout_expected_prev[13] !== 1'bx ) && ( testout_prev[13] !== testout_expected_prev[13] )
		&& ((testout_expected_prev[13] !== last_testout_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[13] = testout_expected_prev[13];
	end
	if (
		( testout_expected_prev[14] !== 1'bx ) && ( testout_prev[14] !== testout_expected_prev[14] )
		&& ((testout_expected_prev[14] !== last_testout_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[14] = testout_expected_prev[14];
	end
	if (
		( testout_expected_prev[15] !== 1'bx ) && ( testout_prev[15] !== testout_expected_prev[15] )
		&& ((testout_expected_prev[15] !== last_testout_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testout_expected_prev);
		$display ("     Real value = %b", testout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testout_exp[15] = testout_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MCU2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] portIn;
reg rst;
// wires                                               
wire [15:0] Macc;
wire [15:0] MaccH;
wire [15:0] McodeOut;
wire [15:0] portOut;
wire [15:0] testout;

wire sampler;                             

// assign statements (if any)                          
MCU2 i1 (
// port map - connection between master ports and signals/registers   
	.Macc(Macc),
	.MaccH(MaccH),
	.McodeOut(McodeOut),
	.clk(clk),
	.portIn(portIn),
	.portOut(portOut),
	.rst(rst),
	.testout(testout)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 
// portIn[ 15 ]
initial
begin
	portIn[15] = 1'b0;
end 
// portIn[ 14 ]
initial
begin
	portIn[14] = 1'b0;
end 
// portIn[ 13 ]
initial
begin
	portIn[13] = 1'b0;
end 
// portIn[ 12 ]
initial
begin
	portIn[12] = 1'b0;
end 
// portIn[ 11 ]
initial
begin
	portIn[11] = 1'b0;
end 
// portIn[ 10 ]
initial
begin
	portIn[10] = 1'b0;
end 
// portIn[ 9 ]
initial
begin
	portIn[9] = 1'b0;
end 
// portIn[ 8 ]
initial
begin
	portIn[8] = 1'b0;
end 
// portIn[ 7 ]
initial
begin
	portIn[7] = 1'b0;
end 
// portIn[ 6 ]
initial
begin
	portIn[6] = 1'b0;
end 
// portIn[ 5 ]
initial
begin
	portIn[5] = 1'b0;
end 
// portIn[ 4 ]
initial
begin
	portIn[4] = 1'b0;
end 
// portIn[ 3 ]
initial
begin
	portIn[3] = 1'b1;
end 
// portIn[ 2 ]
initial
begin
	portIn[2] = 1'b0;
end 
// portIn[ 1 ]
initial
begin
	portIn[1] = 1'b1;
end 
// portIn[ 0 ]
initial
begin
	portIn[0] = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

MCU2_vlg_sample_tst tb_sample (
	.clk(clk),
	.portIn(portIn),
	.rst(rst),
	.sampler_tx(sampler)
);

MCU2_vlg_check_tst tb_out(
	.Macc(Macc),
	.MaccH(MaccH),
	.McodeOut(McodeOut),
	.portOut(portOut),
	.testout(testout),
	.sampler_rx(sampler)
);
endmodule

